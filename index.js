const { Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder } = require('discord.js');
require('dotenv').config();
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('Bot LS Custom est en ligne !');
});

app.listen(port, () => {
  console.log(`Serveur web d√©marr√© sur le port ${port}`);
});

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMembers]
});

const AUTHORIZED_ROLE_ID = '1389671691759779840';

client.once('ready', () => {
  console.log(`Connect√© en tant que ${client.user.tag}`);
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  // V√©rifier que l'auteur a le r√¥le autoris√©
  const member = message.member;
  if (!member.roles.cache.has(AUTHORIZED_ROLE_ID)) {
    // Optionnel : tu peux envoyer un message d'erreur ou juste ignorer
    // return message.reply("‚ùå Vous n'avez pas la permission d'utiliser cette commande.");
    return; // Ici on ignore simplement
  }

  try {
    if (message.content === '!acc') {
      await message.delete().catch(() => {
        console.warn('Impossible de supprimer le message !acc');
      });

      const embedAcc = new EmbedBuilder()
        .setColor('#2ecc71') // Vert agr√©able
        .setTitle('üéâ F√©licitations, ta candidature est accept√©e !')
        .setDescription(
`Bonjour,

Nous sommes ravis de t'accueillir officiellement dans l‚Äô√©quipe LS Custom. Ton profil a su nous convaincre et nous sommes impatients de collaborer avec toi.

Nous comptons sur ton engagement pour faire vivre une ambiance positive et professionnelle, et contribuer au succ√®s de notre garage.

Bienvenue parmi nous ! üöóüîß`
        )
        .setFooter({ text: 'LS Custom ‚Ä¢ Ensemble vers la r√©ussite' })
        .setTimestamp();

      await message.channel.send({ embeds: [embedAcc] });
      console.log(`Commande !acc utilis√©e par ${message.author.tag}`);
    }

    if (message.content === '!ref') {
      await message.delete().catch(() => {
        console.warn('Impossible de supprimer le message !ref');
      });

      const embedRef = new EmbedBuilder()
        .setColor('#e74c3c') // Rouge doux
        .setTitle('ü§ù Merci pour ta candidature')
        .setDescription(
`Hello,

Apr√®s une √©tude attentive de ta candidature, nous ne pouvons malheureusement pas donner suite cette fois-ci.

Ne te d√©courage pas, chaque exp√©rience est une √©tape vers le succ√®s. Nous te souhaitons le meilleur pour tes projets √† venir.

N‚Äôh√©site pas √† postuler √† nouveau lors de nos prochains recrutements. Bonne chance ! üîß‚ú®`
        )
        .setFooter({ text: 'LS Custom ‚Ä¢ Merci de ton int√©r√™t' })
        .setTimestamp();

      await message.channel.send({ embeds: [embedRef] });
      console.log(`Commande !ref utilis√©e par ${message.author.tag}`);
    }

    if (message.content === '!th') {
      await message.delete().catch(() => {});

      const embedTh = new EmbedBuilder()
        .setColor('#f1c40f')
        .setTitle('üö® INFORMATION IMPORTANTE - LS CUSTOM üö®')
        .setDescription(
`Tous les candidats ayant postul√© pour travailler au LS Custom doivent imp√©rativement choisir une tranche horaire qui leur convient pour assurer leurs prestations.

‚è∞ Obligation : Une fois la tranche choisie, vous devez prester minimum 2 heures dans cette tranche horaire.
‚ùå Si ce quota n‚Äôest pas respect√©, cela sera consid√©r√© comme un non-respect de vos engagements, et entra√Ænera un licenciement automatique pour non-respect du quota horaire.

Merci de votre compr√©hension et de votre professionnalisme.üîß`
        )
        .setFooter({ text: 'LS Custom ‚Ä¢ R√®glement interne' })
        .setTimestamp();

      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId('select_time_slot')
        .setPlaceholder('Choisissez votre tranche horaire')
        .addOptions([
          {
            label: 'Horaire Matin (6h / 12h)',
            description: 'Tranche horaire du matin',
            value: 'morning',
            emoji: '‚è∞',
          },
          {
            label: 'Horaire Apr√®s-midi (12h/16h)',
            description: 'Tranche horaire de l\'apr√®s-midi',
            value: 'afternoon',
            emoji: 'üåû',
          },
          {
            label: 'Horaire D√©but Soir√©e (16h/20h)',
            description: 'Tranche horaire d√©but soir√©e',
            value: 'early_evening',
            emoji: 'üåÜ',
          },
          {
            label: 'Horaire Fin Soir√©e (20h/00h)',
            description: 'Tranche horaire fin soir√©e',
            value: 'late_evening',
            emoji: 'üåô',
          },
          {
            label: 'Horaire Nuit (00h/6h)',
            description: 'Tranche horaire nuit',
            value: 'night',
            emoji: 'üåå',
          },
        ]);

      const row = new ActionRowBuilder().addComponents(selectMenu);

      await message.channel.send({ embeds: [embedTh], components: [row] });
      console.log(`Commande !th utilis√©e par ${message.author.tag}`);
    }

    if (message.content === '!form') {
      await message.delete().catch(() => {});

      const embedForm = new EmbedBuilder()
        .setColor('#3498db') // Bleu
        .setTitle('üìö FORMATION OBLIGATOIRE ‚Äì LS CUSTOM üìö')
        .setDescription(
`F√©licitations √† ceux qui ont √©t√© retenus pour rejoindre l‚Äô√©quipe du LS Custom ! Avant de commencer officiellement, certaines d√©marches sont obligatoires pour valider votre entr√©e dans l‚Äôentreprise :

**Recensement au LSPD :**
Vous devez vous rendre au commissariat pour vous faire recenser en tant qu‚Äôemploy√© civil.

**Certificat d‚Äôaptitude au travail :**
Prenez rendez-vous aux EMS pour obtenir un certificat m√©dical d‚Äôaptitude au travail.
üëâ Ce certificat est √† vos frais. Aucune prise en charge ne sera faite par l'entreprise.

**Permis de conduire obligatoires :**
Vous devez √™tre en possession du permis B (voiture) et du permis C (poids lourds) pour pouvoir travailler en toute l√©galit√©.

‚è≥ Merci d‚Äôeffectuer ces d√©marches au plus vite afin de ne pas retarder votre int√©gration.

En cas de questions, n‚Äôh√©sitez pas √† contacter un responsable.üîß`
        )
        .setFooter({ text: 'LS Custom ‚Ä¢ Formation' })
        .setTimestamp();

      await message.channel.send({ embeds: [embedForm] });
      console.log(`Commande !form utilis√©e par ${message.author.tag}`);
    }

  } catch (error) {
    console.error('Erreur lors du traitement d\'une commande :', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isStringSelectMenu()) return;

  if (interaction.customId === 'select_time_slot') {
    const selectedValue = interaction.values[0];

    const labels = {
      morning: 'Horaire Matin (6h / 12h)',
      afternoon: 'Horaire Apr√®s-midi (12h/16h)',
      early_evening: 'Horaire D√©but Soir√©e (16h/20h)',
      late_evening: 'Horaire Fin Soir√©e (20h/00h)',
      night: 'Horaire Nuit (00h/6h)'
    };

    const channelNames = {
      morning: '6h-12h',
      afternoon: '12h-16h',
      early_evening: '16h-20h',
      late_evening: '20h-00h',
      night: '00h-6h'
    };

    const chosenLabel = labels[selectedValue] || 'tranche horaire inconnue';
    const newChannelName = channelNames[selectedValue] || null;

    // Message public de confirmation dans le salon
    await interaction.channel.send(`‚úÖ ${interaction.user}, vous avez choisi la tranche horaire : **${chosenLabel}**. Merci de votre engagement !`);

    // Acknowledge l'interaction sans message visible
    await interaction.deferUpdate();

    // Renommer le salon (si possible)
    if (newChannelName && interaction.channel && interaction.channel.edit) {
      try {
        await interaction.channel.setName(newChannelName);
        console.log(`Salon renomm√© en "${newChannelName}" suite au choix de ${interaction.user.tag}`);
      } catch (error) {
        console.error('Erreur lors du renommage du salon :', error);
      }
    }
  }
});

client.login(process.env.TOKEN);
